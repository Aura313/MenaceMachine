[{"/Users/tanyashah/dev/sem-II/menace-fe/src/index.js":"1","/Users/tanyashah/dev/sem-II/menace-fe/src/App.js":"2","/Users/tanyashah/dev/sem-II/menace-fe/src/reportWebVitals.js":"3","/Users/tanyashah/dev/sem-II/menace-fe/src/Dropdown.js":"4"},{"size":535,"mtime":1651093516736,"results":"5","hashOfConfig":"6"},{"size":7244,"mtime":1651096312916,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1651022230819,"results":"8","hashOfConfig":"6"},{"size":1165,"mtime":1651093631080,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1a4wsxf",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"13"},"/Users/tanyashah/dev/sem-II/menace-fe/src/index.js",[],[],[],"/Users/tanyashah/dev/sem-II/menace-fe/src/App.js",["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42"],[],"import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport axios from 'axios';\nimport './App.css';\nimport Dropdown from './Dropdown';\n\nfunction Box({ value, onClick }) {\n  return (\n    <button className='box' onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Refresh({ onClick }) {\n  return (\n    <button className='refresh ref' onClick={onClick}>\n      Refresh\n    </button>\n  );\n}\n\nfunction StartGame({ title, onClick, disabled }) {\n  return (\n    <button className='refresh' onClick={onClick} disabled={disabled}>\n      {title}\n    </button>\n  );\n}\nfunction App() {\n  const [boxes, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const [isActiveGame, setActiveGame] = useState(false);\n  const [currMove, setCurrMove] = useState([]);\n  const [selectedGame, setSelectedGame] = useState(0);\n  const [label, setLabel] = useState('---------');\n  const nextSymbol = isXNext ? 'X' : 'O';\n\n  const winner = calculateWinner(boxes);\n\n  function renderBox(i) {\n    return (\n      <Box\n        value={boxes[i]}\n        onClick={() => {\n          if (selectedGame == 1 && nextSymbol == 'O') {\n            if (boxes[i] != null || winner != null) {\n              return;\n            }\n            const nextBoxes = boxes.slice();\n            nextBoxes[i] = isXNext ? 'X' : 'O';\n\n            let lebelGen = [];\n            nextBoxes.map((i) => {\n              if (i == null) {\n                lebelGen.push('-');\n              } else {\n                lebelGen.push(i);\n              }\n            });\n\n            setLabel(lebelGen.join(''));\n\n            setSquares(nextBoxes);\n\n            setIsXNext(!isXNext); // toggle turns\n          } else {\n            alert(selectedGame == 0 ? 'Please press Start R Vs M Game!':  `Menace's Move! Please press Start H Vs M Game or ${nextSymbol}'s Move!`);\n          }\n        }}\n      />\n    );\n  }\n  function calculateWinner(boxes) {\n    const possibleLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    // go over all possibly winning lines and check if they consist of only X's/only O's\n    for (let i = 0; i < possibleLines.length; i++) {\n      const [a, b, c] = possibleLines[i];\n      if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\n        return boxes[a];\n      }\n    }\n    return null;\n  }\n\n  function isBoardFull(boxes) {\n    for (let i = 0; i < boxes.length; i++) {\n      if (boxes[i] == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getStatus() {\n    if (winner) {\n      let winString = `Winner: ${\n        winner == 'X' ? 'MENACE' : selectedGame == 0 ? 'RANDOM' : 'HUMAN'\n      }`;\n      return winString;\n    } else if (isBoardFull(boxes)) {\n      return 'Draw!';\n    } else {\n      return 'Next player: ' + (isXNext ? 'X' : 'O');\n    }\n  }\n\n  function renderRestartButton() {\n    return (\n      <Refresh\n        onClick={() => {\n          setSquares(Array(9).fill(null));\n          setIsXNext(true);\n          setActiveGame(false);\n          setLabel('---------');\n        }}\n      />\n    );\n  }\n\n  function renderInitiateBtn() {\n    return (\n      <StartGame\n        title={isActiveGame ? `${nextSymbol}'s Move` : 'Start R Vs M Game'}\n        disabled={btnDisabled()}\n        onClick={async () => {\n          let moves = [];\n          let url = `http://localhost:8080/menace/next/${label}/${nextSymbol}`;\n\n          setActiveGame(true);\n          await axios\n            .get(url)\n            .then((res) => {\n              moves = [...res.data];\n            })\n            .catch((e) => console.log(e, 'error'));\n\n          moves.map((item) => {\n            if (boxes[item.cellNumber - 1] != null || winner != null) {\n              return;\n            }\n            const nextBoxes = boxes.slice();\n            nextBoxes[item.cellNumber - 1] = item.player;\n            let labelGen = [];\n            nextBoxes.map((i) => {\n              if (i == null) {\n                labelGen.push('-');\n              } else {\n                labelGen.push(i);\n              }\n            });\n\n            setLabel(labelGen.join(''));\n\n            setSquares(nextBoxes);\n\n            setIsXNext(!isXNext); // toggle turns\n            renderBox(item.cellNumber - 1);\n          });\n        }}\n      />\n    );\n  }\n\n  const btnDisabled = () => {\n    let flag = false;\n    if (selectedGame == 0) {\n      flag = winner || isBoardFull(boxes) ? true : false;\n    } else {\n      flag = nextSymbol == 'O' || (winner || isBoardFull(boxes)) ? true : false;\n    }\n    return flag;\n  };\n\n  function renderHumanMode() {\n    return (\n      <StartGame\n        title={isActiveGame ? `${nextSymbol}'s Move` : 'Start H Vs M Game'}\n        disabled={btnDisabled()}\n        onClick={async () => {\n          let moves = [];\n          let url = `http://localhost:8080/menace/next/${label}/${nextSymbol}`;\n          setActiveGame(true);\n          await axios\n            .get(url)\n            .then((res) => {\n              moves = [...res.data];\n            })\n            .catch((e) => console.log(e, 'error'));\n\n          moves.map((item) => {\n            if (boxes[item.cellNumber - 1] != null || winner != null) {\n              return;\n            }\n            const nextBoxes = boxes.slice();\n            nextBoxes[item.cellNumber - 1] = item.player;\n            let labelGen = [];\n            nextBoxes.map((i) => {\n              if (i == null) {\n                labelGen.push('-');\n              } else {\n                labelGen.push(i);\n              }\n            });\n\n            setLabel(labelGen.join(''));\n\n            setSquares(nextBoxes);\n\n            setIsXNext(!isXNext); // toggle turns\n            renderBox(item.cellNumber - 1);\n          });\n        }}\n      />\n    );\n  }\n  function getCurrentGame(selectedGame) {\n    setSelectedGame(selectedGame);\n    setSquares(Array(9).fill(null));\n    setIsXNext(true);\n    setActiveGame(false);\n    setLabel('---------');\n  }\n\n  return (\n    <div className='container'>\n      <h3> MENACE - a Machine Educable Noughts And Crosses Engine </h3>\n      <div className='wrapper'>\n        <div> Select Your Game: &nbsp; </div>\n        <Dropdown getCurrentGame={getCurrentGame}  />\n      </div>\n      <div className='game'>\n        <div className='game-board'>\n          <div className='board-row'>\n            {renderBox(0)}\n            {renderBox(1)}\n            {renderBox(2)}\n          </div>\n          <div className='board-row'>\n            {renderBox(3)}\n            {renderBox(4)}\n            {renderBox(5)}\n          </div>\n          <div className='board-row'>\n            {renderBox(6)}\n            {renderBox(7)}\n            {renderBox(8)}\n          </div>\n        </div>\n        <div className={!winner ? 'game-info' : 'win-state'}>{getStatus()}</div>\n        <div className='wrapper'>\n          <div className='refresh-button'>{renderRestartButton()}</div>\n          {selectedGame == 0 ? (\n            <div className='refresh-button'>{renderInitiateBtn()}</div>\n          ) : (\n            <div className='refresh-button'>{renderHumanMode()}</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tanyashah/dev/sem-II/menace-fe/src/reportWebVitals.js",[],[],"/Users/tanyashah/dev/sem-II/menace-fe/src/Dropdown.js",["43","44","45","46","47"],[],"import React, { useState, useEffect } from 'react';\n\nconst data = [{id: 0, label: \"Menace VS Random\"}, {id: 1, label: \"Menace VS Human\"}];\n\nconst Dropdown = (props) => {\n  const [isOpen, setOpen] = useState(false);\n  const [items, setItem] = useState(data);\n  const [selectedItem, setSelectedItem] = useState(null);\n  \n  const toggleDropdown = () => setOpen(!isOpen);\n  \n  const handleItemClick = (id) => {\n    toggleDropdown();\n    selectedItem == id ? setSelectedItem(null) : setSelectedItem(id);\n    props.getCurrentGame(id);\n  }\n  \n  return (\n    <div className='dropdown'>\n      <div className='dropdown-header' onClick={toggleDropdown}>\n        {selectedItem ? items.find(item => item.id == selectedItem).label : items[0].label}\n      </div>\n      <div className={`dropdown-body ${isOpen && 'open'}`}>\n        {items.map((item, idx) => (\n          <div key={idx} className=\"dropdown-item\" onClick={e => handleItemClick(e.target.id)} id={item.id}>\n            <span className={`dropdown-item-dot ${item.id == selectedItem && 'selected'}`}>• </span>\n            {item.label}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Dropdown;",{"ruleId":"48","severity":1,"message":"49","line":1,"column":27,"nodeType":"50","messageId":"51","endLine":1,"endColumn":36},{"ruleId":"48","severity":1,"message":"52","line":34,"column":10,"nodeType":"50","messageId":"51","endLine":34,"endColumn":18},{"ruleId":"48","severity":1,"message":"53","line":34,"column":20,"nodeType":"50","messageId":"51","endLine":34,"endColumn":31},{"ruleId":"54","severity":1,"message":"55","line":46,"column":28,"nodeType":"56","messageId":"57","endLine":46,"endColumn":30},{"ruleId":"54","severity":1,"message":"55","line":46,"column":47,"nodeType":"56","messageId":"57","endLine":46,"endColumn":49},{"ruleId":"58","severity":1,"message":"59","line":54,"column":31,"nodeType":"60","messageId":"61","endLine":54,"endColumn":33},{"ruleId":"54","severity":1,"message":"55","line":68,"column":32,"nodeType":"56","messageId":"57","endLine":68,"endColumn":34},{"ruleId":"54","severity":1,"message":"55","line":107,"column":16,"nodeType":"56","messageId":"57","endLine":107,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":107,"column":49,"nodeType":"56","messageId":"57","endLine":107,"endColumn":51},{"ruleId":"58","severity":1,"message":"62","line":147,"column":28,"nodeType":"60","messageId":"63","endLine":147,"endColumn":30},{"ruleId":"58","severity":1,"message":"59","line":149,"column":15,"nodeType":"64","messageId":"65","endLine":149,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":154,"column":31,"nodeType":"60","messageId":"61","endLine":154,"endColumn":33},{"ruleId":"54","severity":1,"message":"55","line":176,"column":22,"nodeType":"56","messageId":"57","endLine":176,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":179,"column":25,"nodeType":"56","messageId":"57","endLine":179,"endColumn":27},{"ruleId":"58","severity":1,"message":"62","line":200,"column":28,"nodeType":"60","messageId":"63","endLine":200,"endColumn":30},{"ruleId":"58","severity":1,"message":"59","line":202,"column":15,"nodeType":"64","messageId":"65","endLine":202,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":207,"column":31,"nodeType":"60","messageId":"61","endLine":207,"endColumn":33},{"ruleId":"54","severity":1,"message":"55","line":262,"column":25,"nodeType":"56","messageId":"57","endLine":262,"endColumn":27},{"ruleId":"48","severity":1,"message":"49","line":1,"column":27,"nodeType":"50","messageId":"51","endLine":1,"endColumn":36},{"ruleId":"48","severity":1,"message":"66","line":7,"column":17,"nodeType":"50","messageId":"51","endLine":7,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":14,"column":18,"nodeType":"56","messageId":"57","endLine":14,"endColumn":20},{"ruleId":"54","severity":1,"message":"55","line":21,"column":52,"nodeType":"56","messageId":"57","endLine":21,"endColumn":54},{"ruleId":"54","severity":1,"message":"55","line":26,"column":59,"nodeType":"56","messageId":"57","endLine":26,"endColumn":61},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'currMove' is assigned a value but never used.","'setCurrMove' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","'setItem' is assigned a value but never used."]