{"ast":null,"code":"var _jsxFileName = \"/Users/tanyashah/dev/sem-II/menace-fe/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(_ref) {\n  let {\n    value,\n    onClick\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nfunction Game() {\n  _s();\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const winner = calculateWinner(squares);\n\n  function renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      onClick: () => {\n        if (squares[i] != null || winner != null) {\n          return;\n        }\n\n        const nextSquares = squares.slice();\n        nextSquares[i] = isXNext ? 'X' : 'O';\n        setSquares(nextSquares);\n        setIsXNext(!isXNext); // toggle turns\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: getStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"mGIQpJhPzamqOAfNEpu4Dn1fc0s=\");\n\n_c2 = Game;\n\nfunction calculateWinner(squares) {\n  const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // go over all possibly winning lines and check if they consist of only X's/only O's\n\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getStatus() {\n  if (winner) {\n    return 'Winner: ' + winner;\n  } else if (isBoardFull(squares)) {\n    return 'Draw!';\n  } else {\n    return 'Next player: ' + (isXNext ? 'X' : 'O');\n  }\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 102,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"sources":["/Users/tanyashah/dev/sem-II/menace-fe/src/index.js"],"names":["React","useState","ReactDOM","Square","value","onClick","Game","squares","setSquares","Array","fill","isXNext","setIsXNext","winner","calculateWinner","renderSquare","i","nextSquares","slice","getStatus","possibleLines","length","a","b","c","isBoardFull","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className='square' onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Game() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const winner = calculateWinner(squares);\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const nextSquares = squares.slice();\n          nextSquares[i] = isXNext ? 'X' : 'O';\n          setSquares(nextSquares);\n\n          setIsXNext(!isXNext); // toggle turns\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className='container'>\n      <div className='game'>\n        <div className='game-board'>\n          <div className='board-row'>\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n          </div>\n          <div className='board-row'>\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n          </div>\n          <div className='board-row'>\n            {renderSquare(6)}\n            {renderSquare(7)}\n            {renderSquare(8)}\n          </div>\n        </div>\n        <div className='game-info'>{getStatus()}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // go over all possibly winning lines and check if they consist of only X's/only O's\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getStatus() {\n  if (winner) {\n    return 'Winner: ' + winner;\n  } else if (isBoardFull(squares)) {\n    return 'Draw!';\n  } else {\n    return 'Next player: ' + (isXNext ? 'X' : 'O');\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}